// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  phone     String?
  location  String?
  website   String?
  linkedin  String?
  github    String?
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  skills        Skill[]
  experiences   Experience[]
  educations    Education[]
  projects      Project[]
  resumes       Resume[]
  psychProfiles PsychologicalProfile[]
  jobMatches    JobMatch[]

  @@map("users")
}

model Skill {
  id         String   @id @default(cuid())
  name       String
  category   String // "technical", "soft", "language"
  level      Int // 1-5 scale
  verified   Boolean  @default(false)
  yearsOfExp Int?
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, name])
  @@map("skills")
}

model Experience {
  id           String    @id @default(cuid())
  title        String
  company      String
  location     String?
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  description  String?
  achievements String[]
  skills       String[]
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("experiences")
}

model Education {
  id          String    @id @default(cuid())
  institution String
  degree      String
  field       String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  gpa         Float?
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("educations")
}

model Project {
  id           String    @id @default(cuid())
  name         String
  description  String?
  url          String?
  github       String?
  technologies String[]
  status       String    @default("completed") // "completed", "in_progress", "planned"
  startDate    DateTime?
  endDate      DateTime?
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("projects")
}

model Resume {
  id        String   @id @default(cuid())
  title     String
  template  String   @default("modern")
  content   Json // Structured resume data
  pdfUrl    String?
  isPublic  Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resumes")
}

model PsychologicalProfile {
  id                  String    @id @default(cuid())
  personalityType     String? // MBTI type
  bigFiveScores       Json? // Openness, Conscientiousness, Extraversion, Agreeableness, Neuroticism
  workPreferences     Json? // Remote, team size, leadership style, etc.
  motivationFactors   String[] // Achievement, autonomy, recognition, etc.
  stressFactors       String[]
  communicationStyle  String?
  learningStyle       String?
  careerGoals         String[]
  strengthsWeaknesses Json?
  completedAt         DateTime?
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("psychological_profiles")
}

model JobMatch {
  id             String   @id @default(cuid())
  jobTitle       String
  company        String
  jobDescription String
  requirements   String[]
  location       String?
  salaryRange    String?
  jobUrl         String?
  matchScore     Float // 0.0 - 1.0
  matchReasons   String[] // What made this a good match
  missingSkills  String[] // Skills user lacks for this job
  aiAnalysis     Json? // Detailed AI analysis
  applied        Boolean  @default(false)
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("job_matches")
}

model ApiUsage {
  id           String   @id @default(cuid())
  service      String // "github_models", "openai", etc.
  endpoint     String // Specific API endpoint used
  tokensUsed   Int?
  cost         Float?
  userId       String?
  success      Boolean  @default(true)
  errorMessage String?
  createdAt    DateTime @default(now())

  @@map("api_usage")
}
